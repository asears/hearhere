import { $ } from 'genaiscript';
import { env, def } from 'genaiscript';
import { git } from 'genaiscript';

// Get diff of changes
const changes = await git.diff({ base: "main" });
def("GIT_DIFF", changes, {
    language: "diff",
    maxTokens: 20000,
});

// Generate analysis sections
const summary = await $`
Based on the changes in GIT_DIFF, provide a concise summary of the changes and their impact.
Keep it brief but informative. Focus on what changed and why.

Format the response as:
---
### üîÑ Changes Summary
[2-3 bullet points about main changes]

### üéØ Impact
[1-2 sentences about impact]
`;

const archDiagram = await $`
Based on the changes in GIT_DIFF, create a Mermaid diagram that shows:
1. The components/files that were modified
2. Their relationships and data flow
3. Any new dependencies or connections

Format your response as a Mermaid diagram using flowchart syntax. Keep it focused on the changes.
Example:
\`\`\`mermaid
flowchart LR
    A[Component A] --> B[Component B]
    B --> C[Component C]
\`\`\`
`;

const sequenceDiagram = await $`
For the most significant change in GIT_DIFF, create a Mermaid sequence diagram showing:
1. The flow of operations
2. Key method calls
3. Important data exchanges

Format your response as a Mermaid sequence diagram. Focus on the main workflow.
Example:
\`\`\`mermaid
sequenceDiagram
    participant A as ComponentA
    participant B as ComponentB
    A->>B: request()
    B-->>A: response()
\`\`\`
`;

const improvements = await $`
Based on the changes in GIT_DIFF, suggest potential improvements focusing on:
1. Code organization and patterns
2. Error handling and resilience
3. Developer experience and maintainability
4. Potential optimizations

Format the response as:
---
### üî® Suggested Improvements
[3-4 specific, actionable improvements]
`;

const performance = await $`
Analyze the changes in GIT_DIFF for performance considerations, including:
1. Potential bottlenecks or inefficiencies
2. Resource usage (memory, CPU, network)
3. Scalability concerns
4. Caching opportunities

Format the response as:
---
### ‚ö° Performance Considerations
[2-3 bullet points about performance impacts]

### üìà Scalability Notes
[1-2 sentences about scaling implications]
`;

const dependencies = await $`
Analyze GIT_DIFF to identify:
1. New package imports or dependencies
2. Updated library versions
3. Internal module dependencies
4. Potential version conflicts

Format the response as:
---
### üì¶ Dependencies
- **New Imports:** [list new imports]
- **Updated Libraries:** [list updated versions]
- **Internal Dependencies:** [list affected internal modules]

### ‚ö†Ô∏è Version Considerations
[Any version conflict warnings or compatibility notes]
`;

// Combine outputs
const output = `## Pull Request Analysis

${summary}

## Architecture & Flow Diagrams

${archDiagram}

${sequenceDiagram}

## Technical Analysis

${improvements}

${performance}

${dependencies}

---
*Generated by GenAIScript PR Analyzer*`;

// Output as comment
env.output = output;
